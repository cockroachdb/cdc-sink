# Copyright 2024 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Starting services + monitoring:
# docker compose --profile monitor up --build

# Run workloads
# docker compose run --rm -it east_workload
# docker compose run --rm -it west_workload


# Clean up everything (including volumes)
# docker compose --profile monitor --profile workload --profile sql down -v
version: '3.9'

volumes:
  backup: {}
  east: {}
  west: {}

include:
  - ../dashboard/docker-compose.yaml

services:

 # CRDB clusters
 east:
   hostname: east
   image: cockroachdb/cockroach:latest-v23.1
   command: start-single-node --insecure --external-io-dir /backup --cluster-name east
   volumes:
     - 'east:/cockroach/cockroach-data'
     - 'backup:/backup'
   restart: always
   healthcheck:
      test: curl http://localhost:8080/health
      interval: 2s
      retries: 20
   ports:
      - :26257
      - :8080

 west:
   hostname: west
   image: cockroachdb/cockroach:latest-v23.1
   command: start-single-node --insecure --external-io-dir /backup  --cluster-name west
   volumes:
     - 'west:/cockroach/cockroach-data'
     - 'backup:/backup'
   restart: always
   healthcheck:
     test: curl http://localhost:8080/health
     interval: 2s
     retries: 20
   ports:
      - :26257
      - :8080

 # CRDB clusters initialization
 east_init:
   hostname: east_init
   build: ./init
   environment:
      - TARGET=east
      - DIR=east_west
      - COCKROACH_DEV_LICENSE=${COCKROACH_DEV_LICENSE}
      - COCKROACH_DEV_ORGANIZATION=${COCKROACH_DEV_ORGANIZATION}
   healthcheck:
     test: bash -c '[ -f /tmp/done.txt ] '
     interval: 2s
     retries: 10
   depends_on:
     east:
       condition: service_healthy

 west_init:
   hostname: west_init
   build: ./init
   environment:
      - TARGET=west
      - DIR=west_east
      - COCKROACH_DEV_LICENSE=${COCKROACH_DEV_LICENSE}
      - COCKROACH_DEV_ORGANIZATION=${COCKROACH_DEV_ORGANIZATION}
   healthcheck:
     test: bash -c '[ -f /tmp/done.txt ] '
     interval: 2s
     retries: 10
   depends_on:
     west:
        condition: service_healthy

 # replicator
 east_west:
   hostname: east_west
   build: ./userscripts
   depends_on:
      west_init:
        condition: service_healthy
   command: start ${REPLICATOR_ARGS:-} --bindAddr :30004 --metricsAddr :30005 --tlsSelfSigned --disableAuthentication --targetConn 'postgresql://root@west:26257/?sslmode=disable' --userscript east_west.ts
   restart: always

 west_east:
   hostname: west_east
   build: ./userscripts
   depends_on:
      east_init:
        condition: service_healthy
   command: start ${REPLICATOR_ARGS:-} --bindAddr :30004 --metricsAddr :30005 --tlsSelfSigned --disableAuthentication --targetConn 'postgresql://root@east:26257/?sslmode=disable' --userscript west_east.ts
   restart: always

# workloads
 east_workload:
   hostname: east_workload
   image: cockroachdb/cockroach:latest-v23.1
   depends_on:
      east:
        condition: service_healthy 
   command: workload run kv --write-seq S${START_EAST:-0} --max-rate ${RATE:-100} --sequential --duration ${DURATION:-60s} "postgresql://root@east:26257/kv?sslmode=disable"
   profiles:
      - workload

 west_workload:
   hostname: west_workload
   image: cockroachdb/cockroach:latest-v23.1
   depends_on:
      west:
        condition: service_healthy
   command: workload run kv --write-seq S${START_WEST:-0} --max-rate ${RATE:-100} --sequential --duration ${DURATION:-60s} "postgresql://root@west:26257/kv?sslmode=disable"
   profiles:
      - workload

 concurrent_workloads:
   image: busybox
   command: ["/bin/sh", "-ec", "sleep 1"]
   depends_on:
      east_workload:
        condition: service_completed_successfully
      west_workload:
        condition: service_completed_successfully
   profiles:
      - workload

# SQL Access
 east_sql:
   hostname: east_workload
   image: cockroachdb/cockroach:latest-v23.1
   depends_on:
      east:
        condition: service_healthy 
   command: sql --insecure --host east
   profiles:
      - sql

 west_sql:
   hostname: east_workload
   image: cockroachdb/cockroach:latest-v23.1
   depends_on:
      west:
        condition: service_healthy  
   command: sql --insecure --host west
   profiles:
      - sql
