{{- /*gotype: github.com/cockroachdb/cdc-sink/internal/staging/stage.templateData*/ -}}
{{- $top := . -}}
WITH {{- sp -}}

{{- /*
Select the minimum unapplied timestamp(s) from the source table.

We start scanning at some timestamp, but after a starting key, which
could be a zero-length string.

hlc_0 AS (
  SELECT nanos, logical FROM staging_table
  WHERE (nanos, logical, key) > (start_at_nanos, start_at_logical, start_after_key)
  AND (nanos, locical) < (end_before_nanos, end_before_logical)
  AND NOT APPLIED
  GROUP BY nanos, logical -- We want multi-column distinct behavior
  ORDER BY nanos, logical
  LIMIT N
)

*/ -}}
{{- range  $idx, $tgt := .Cursor.Targets -}}
{{- if $idx -}}, {{- nl -}}{{- end -}}
hlc_{{ $idx }} (n, l) AS (
SELECT nanos, logical
FROM {{ $top.StagingTable $tgt }}
WHERE (nanos, logical, key) > ($1, $2, ($5::STRING[])[ {{- add $idx 1 -}} ])
AND (nanos, logical) < ($3, $4)
AND NOT applied
GROUP BY nanos, logical
ORDER BY nanos, logical
LIMIT {{ or $top.Cursor.TimestampLimit 1 }}
)
{{- end -}}

{{- /*
Select the minimum timestamp(s) across all source tables.

hlc_all AS (
  SELECT n, l FROM hlc_0 UNION ALL
  SELECT n, l FROM hlc_1 UNION ALL ...
  SELECT n, l FROM hlc_N
),
hlc_min AS (SELECT n, l FROM hlc_all GROUY BY n, l ORDER BY n, l LIMIT N)

*/ -}}
, {{- nl -}}
hlc_all AS (
{{- range $idx, $tgt := .Cursor.Targets -}}
{{- if $idx }} UNION ALL {{- nl -}}{{- end -}}
SELECT n, l FROM hlc_{{ $idx }}
{{- end -}}
),
hlc_min AS (SELECT n, l FROM hlc_all GROUP BY n, l ORDER BY n, l LIMIT {{ or .Cursor.TimestampLimit 1 }})

{{- /*
Set the applied column and return the data.

We want to update any non-applied mutations after the starting key
and within the HLC timestamp that we're operating on.

data_0 AS (
  UPDATE staging_table SET applied=true
  FROM hlc_min
  WHERE (nanos, logical) IN (hlc_min)
    AND (nanos, logical, key) > (start_at_nanos, start_at_logical, start_after_key)
    AND NOT APPLIED
  [ ORDER BY nanos, logical, key
    LIMIT n ]
  RETURNING nanos, logical, key, mut, before
)
*/ -}}
{{- range $idx, $tgt := .Cursor.Targets -}}
, {{- nl -}}
data_{{ $idx }} AS (
UPDATE {{ $top.StagingTable $tgt }}
SET applied=true
FROM hlc_min
WHERE (nanos,logical) = (n, l)
AND (nanos, logical, key) > ($1, $2, ($5::STRING[])[ {{- add $idx 1 -}} ])
AND NOT applied
{{- if $top.Cursor.UpdateLimit -}} {{- nl -}}
ORDER BY nanos, logical, key
LIMIT {{ $top.Cursor.UpdateLimit }}
{{- end -}}
{{- nl -}} RETURNING nanos, logical, key, mut, before)
{{- end -}}
{{- nl -}}

{{- /*
Top-level query aggregates the updates in table order.

SELECT 0 idx, * FROM data_0 UNION ALL
SELECT 1 idx, * FROM data_1 UNION ALL ...
SELECT N idx, * FROM data_N
ORDER BY nanos, logical, idx, key

*/ -}}
SELECT * FROM ( {{- nl -}}
{{- range $idx, $tgt := .Cursor.Targets -}}
{{- if $idx }} UNION ALL {{- nl -}}{{- end -}}
SELECT {{ $idx }} idx, nanos, logical, key, mut, before FROM data_{{ $idx }}
{{- end -}}
) {{- nl -}}
ORDER BY nanos, logical, idx, key

{{- /* Consume whitespace */ -}}
