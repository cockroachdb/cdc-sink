// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cdc

import (
	"github.com/cockroachdb/cdc-sink/internal/script"
	"github.com/cockroachdb/cdc-sink/internal/sinktest/all"
	"github.com/cockroachdb/cdc-sink/internal/source/logical"
	"github.com/cockroachdb/cdc-sink/internal/staging/auth/trust"
	"github.com/cockroachdb/cdc-sink/internal/staging/leases"
	"github.com/cockroachdb/cdc-sink/internal/util/diag"
)

// Injectors from test_fixture.go:

func newTestFixture(fixture *all.Fixture, config *Config) (*testFixture, func(), error) {
	authenticator := trust.New()
	baseFixture := fixture.Fixture
	context := baseFixture.Context
	appliers := fixture.Appliers
	configs := fixture.Configs
	scriptConfig, err := logical.ProvideUserScriptConfig(config)
	if err != nil {
		return nil, nil, err
	}
	loader, err := script.ProvideLoader(scriptConfig)
	if err != nil {
		return nil, nil, err
	}
	baseConfig, err := logical.ProvideBaseConfig(config, loader)
	if err != nil {
		return nil, nil, err
	}
	diagnostics, cleanup := diag.New(context)
	memo := fixture.Memo
	stagingPool, cleanup2, err := logical.ProvideStagingPool(context, baseConfig, diagnostics)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	targetPool, cleanup3, err := logical.ProvideTargetPool(context, baseConfig, diagnostics)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	watchers := fixture.Watchers
	checker := fixture.VersionChecker
	factory, err := logical.ProvideFactory(context, appliers, configs, baseConfig, diagnostics, memo, loader, stagingPool, targetPool, watchers, checker)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	immediate, cleanup4, err := ProvideImmediate(factory)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	stagingSchema, err := logical.ProvideStagingDB(baseConfig)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	typesLeases, err := leases.ProvideLeases(context, stagingPool, stagingSchema)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metaTable := ProvideMetaTable(config)
	stagers := fixture.Stagers
	resolvers, cleanup5, err := ProvideResolvers(context, config, typesLeases, factory, metaTable, stagingPool, stagers, watchers)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	handler := &Handler{
		Authenticator: authenticator,
		Config:        config,
		Immediate:     immediate,
		Resolvers:     resolvers,
		StagingPool:   stagingPool,
		Stores:        stagers,
		TargetPool:    targetPool,
	}
	cdcTestFixture := &testFixture{
		Fixture:   fixture,
		Handler:   handler,
		Resolvers: resolvers,
	}
	return cdcTestFixture, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// test_fixture.go:

type testFixture struct {
	*all.Fixture
	Handler   *Handler
	Resolvers *Resolvers
}
