// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package debezium

import (
	"github.com/cockroachdb/cdc-sink/internal/script"
	"github.com/cockroachdb/cdc-sink/internal/source/logical"
	"github.com/cockroachdb/cdc-sink/internal/staging/memo"
	"github.com/cockroachdb/cdc-sink/internal/staging/version"
	"github.com/cockroachdb/cdc-sink/internal/target/apply"
	"github.com/cockroachdb/cdc-sink/internal/target/dlq"
	"github.com/cockroachdb/cdc-sink/internal/target/schemawatch"
	"github.com/cockroachdb/cdc-sink/internal/util/applycfg"
	"github.com/cockroachdb/cdc-sink/internal/util/diag"
	"github.com/cockroachdb/cdc-sink/internal/util/stopper"
)

// Injectors from injector.go:

func NewServer(ctx *stopper.Context, config *Config) (*Debezium, error) {
	diagnostics := diag.New(ctx)
	scriptConfig, err := logical.ProvideUserScriptConfig(config)
	if err != nil {
		return nil, err
	}
	loader, err := script.ProvideLoader(scriptConfig)
	if err != nil {
		return nil, err
	}
	baseConfig, err := logical.ProvideBaseConfig(config, loader)
	if err != nil {
		return nil, err
	}
	stagingPool, err := logical.ProvideStagingPool(ctx, baseConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := logical.ProvideStagingDB(baseConfig)
	if err != nil {
		return nil, err
	}
	authenticator, err := ProvideAuthenticator(ctx, diagnostics, config, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	listener, err := ProvideListener(ctx, config, diagnostics)
	if err != nil {
		return nil, err
	}
	targetPool, err := logical.ProvideTargetPool(ctx, baseConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	targetStatements, err := logical.ProvideTargetStatements(ctx, baseConfig, targetPool, diagnostics)
	if err != nil {
		return nil, err
	}
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	dlqConfig := logical.ProvideDLQConfig(baseConfig)
	watchers, err := schemawatch.ProvideFactory(ctx, targetPool, diagnostics)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(dlqConfig, targetPool, watchers)
	appliers, err := apply.ProvideFactory(ctx, targetStatements, configs, diagnostics, dlQs, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	memoMemo, err := memo.ProvideMemo(ctx, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	checker := version.ProvideChecker(stagingPool, memoMemo)
	factory, err := logical.ProvideFactory(ctx, appliers, configs, baseConfig, diagnostics, memoMemo, loader, stagingPool, targetPool, watchers, checker)
	if err != nil {
		return nil, err
	}
	handler, err := ProvideHandler(ctx, config, authenticator, factory, loader)
	if err != nil {
		return nil, err
	}
	serveMux := ProvideMux(handler, stagingPool, targetPool)
	tlsConfig, err := ProvideTLSConfig(config)
	if err != nil {
		return nil, err
	}
	server := ProvideServer(ctx, authenticator, diagnostics, listener, serveMux, tlsConfig)
	debezium := &Debezium{
		Server: server,
	}
	return debezium, nil
}
