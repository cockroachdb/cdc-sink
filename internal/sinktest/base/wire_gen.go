// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package base

// Injectors from injector.go:

// NewFixture constructs a self-contained test fixture.
func NewFixture() (*Fixture, func(), error) {
	context, cleanup, err := ProvideContext()
	if err != nil {
		return nil, nil, err
	}
	sourcePool, cleanup2, err := ProvideSourcePool(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sourceSchema, cleanup3, err := ProvideSourceSchema(context, sourcePool)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	stagingPool, cleanup4, err := ProvideStagingPool(context)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	stagingSchema, cleanup5, err := ProvideStagingSchema(context, stagingPool)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	targetPool, cleanup6, err := ProvideTargetPool(context, sourcePool)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	targetSchema, cleanup7, err := ProvideTargetSchema(context, targetPool)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	fixture := &Fixture{
		Context:      context,
		SourcePool:   sourcePool,
		SourceSchema: sourceSchema,
		StagingPool:  stagingPool,
		StagingDB:    stagingSchema,
		TargetPool:   targetPool,
		TargetSchema: targetSchema,
	}
	return fixture, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
