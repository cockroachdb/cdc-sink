// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package all

import (
	"github.com/cockroachdb/cdc-sink/internal/sinktest/base"
	"github.com/cockroachdb/cdc-sink/internal/staging/memo"
	"github.com/cockroachdb/cdc-sink/internal/staging/stage"
	"github.com/cockroachdb/cdc-sink/internal/target/apply"
	"github.com/cockroachdb/cdc-sink/internal/target/schemawatch"
)

// Injectors from injector.go:

// NewFixture constructs a self-contained test fixture for all services
// in the target sub-packages.
func NewFixture() (*Fixture, func(), error) {
	context, cleanup, err := base.ProvideContext()
	if err != nil {
		return nil, nil, err
	}
	dbInfo, err := base.ProvideDBInfo(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pool := base.ProvidePool(dbInfo)
	stagingDB, cleanup2, err := base.ProvideStagingDB(context, pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	testDB, cleanup3, err := base.ProvideTestDB(context, pool)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	fixture := &base.Fixture{
		Context:   context,
		DBInfo:    dbInfo,
		Pool:      pool,
		StagingDB: stagingDB,
		TestDB:    testDB,
	}
	configs, cleanup4, err := apply.ProvideConfigs(context, pool, stagingDB)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	watchers, cleanup5 := schemawatch.ProvideFactory(pool)
	appliers, cleanup6 := apply.ProvideFactory(configs, watchers)
	memoMemo, err := memo.ProvideMemo(context, pool, stagingDB)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	stagers := stage.ProvideFactory(pool, stagingDB)
	watcher, err := ProvideWatcher(context, testDB, watchers)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	allFixture := &Fixture{
		Fixture:  fixture,
		Appliers: appliers,
		Configs:  configs,
		Memo:     memoMemo,
		Stagers:  stagers,
		Watchers: watchers,
		Watcher:  watcher,
	}
	return allFixture, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
