# Copyright 2023 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Binaries will build cdc-sink for a variety of common platforms.
name: Binaries
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  merge_group: # Build, but don't push
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
      - '.github/workflows/binaries.yaml'
  pull_request: # Build, but don't push
  workflow_dispatch:  # Make it easy to push other branches/tags.

jobs:
  warm-build-cache:
    uses: ./.github/workflows/warm-build-cache.yaml

  binaries:
    name: Binaries
    runs-on: ubuntu-latest
    needs: warm-build-cache
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe

    steps:
      - uses: actions/checkout@v4

      # Pick up a symbolic name for the build (e.g. "v1.0.1") and a guaranteed SHA or tag value.
      - id: names
        name: Determine versions and names
        run: |
          BUILDNAME="cdc-sink-${{ matrix.os }}-${{ matrix.arch }}"   # cdc-sink-linux-amd64
          OUTPUT="cdc-sink${{ matrix.ext }}"                         # cdc-sink(.exe)
          VERSION=$(git describe --tags --always --dirty)            # Tag name or SHA 
          SYMBOLIC_NAME=$(                                           # Tag, branch, or SHA.
            git describe --tags --exact-match HEAD 2> /dev/null ||
            git symbolic-ref -q --short HEAD ||
            echo "$VERSION")
          SYMBOLIC_NAME=$(echo $SYMBOLIC_NAME | tr / -) # Replaces slashes in branch name
          
          # These are file globs to be included in the tarball.
          DISTRO_PATHS=$(cat << EOF
          $OUTPUT
          README.md
          VERSION.txt
          licenses/*.txt
          EOF)
          
          # Write a build-marker file for convenience.
          echo "$VERSION" > VERSION.txt

          # Export values into next build steps.          
          echo "BUILDNAME=$BUILDNAME" >> $GITHUB_ENV
          echo "DISTRO_NAME=$BUILDNAME-$SYMBOLIC_NAME" >> $GITHUB_ENV          
          echo "OUTPUT=$OUTPUT" >> $GITHUB_ENV
          echo "SYMBOLIC_NAME=$SYMBOLIC_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Special handling since this is a multiline string
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          echo "DISTRO_PATHS<<EOF" >> $GITHUB_ENV
          echo "$DISTRO_PATHS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - id: setup_go
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - id: licenses
        name: Bundle license files
        run: go generate ./internal/cmd/licenses

      - id: build
        name: Build
        run: >
          go
          build
          -v
          -ldflags="-s -w"
          -o $OUTPUT
          .
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - id: tarball
        name: Create distribution tarball
        run: |
          # Expand globs with the find command. The output from find
          # will have a ./ at the beginning.  We'll replace that when
          # packing the archive with the distribution name.
          echo "${{ env.DISTRO_PATHS }}" |
          xargs -rIQ find . -path ./Q  -print0 |
          xargs -r0 tar zcvf ${{ env.DISTRO_NAME }}.tgz --transform 's|^./|${{ env.DISTRO_NAME }}/|'

      - id: auth
        name: Authenticate to GCP
        # Only authenticate if we're on the main repo (i.e. have access
        # to the secret) and we're pushing to a branch. Manual runs are
        # also allowed as a convenience.
        if: ${{ !github.event.pull_request.head.repo.fork && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.CDC_SINK_BINARIES_KEY }}

      - id: upload
        uses: google-github-actions/upload-cloud-storage@v1
        if: ${{ steps.auth.outcome == 'success' }} # Not skipped
        with:
          path: ${{ env.DISTRO_NAME }}.tgz
          destination: ${{ vars.CDC_SINK_BUCKET }}/
          process_gcloudignore: false # Suppress warning about missing .gcloudignore file

      - id: link
        name: Summary link
        if: ${{ steps.auth.outcome == 'success' }} # Not skipped
        run: echo "[${{ env.BUILDNAME }}](https://storage.googleapis.com/${{ vars.CDC_SINK_BUCKET }}/${{ env.DISTRO_NAME }}.tgz)" >> $GITHUB_STEP_SUMMARY

  # Aggregate the results of multiple jobs within this workflow into a
  # single status object that we can use for branch protection.
  #
  # https://docs.github.com/en/rest/commits/statuses
  status:
    name: Create status objects
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    needs: # Update failure case below
      - binaries
    if: ${{ always() }}
    env:
      CONTEXT: Workflow Binaries
      GH_TOKEN: ${{ github.token }}
      MERGE_SHA: ${{ github.event.merge_group.head_sha }}
      PR_SHA: ${{ github.event.pull_request.head.sha }}
      STATE: success
    steps:
      - name: Failure
        if: ${{ needs.binaries.result != 'success' }}
        run: echo "STATE=failure" >> $GITHUB_ENV
      - name: Report
        run: |
          set -eo pipefail

          if [ ! -z "$PR_SHA" ]; then
            gh api \
               repos/${{ github.repository }}/statuses/$PR_SHA \
               -f "state=$STATE" \
               -f "context=$CONTEXT"
          fi
          
          if [ ! -z "$MERGE_SHA" ]; then
            gh api \
              repos/${{ github.repository }}/statuses/$MERGE_SHA \
              -f "state=$STATE" \
              -f "context=$CONTEXT"
          fi
