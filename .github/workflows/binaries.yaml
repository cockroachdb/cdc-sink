# Binaries will build cdc-sink for a variety of common platforms.
name: Binaries
permissions:
  contents: read
on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
      - '.github/workflows/binaries.yaml'
  pull_request:
    paths:
      # Only upload on pull requests that modify this file, for testing.
      - '.github/workflows/binaries.yaml'
  workflow_dispatch:
    inputs:
      build_binaries:
        description: 'Build distributable binaries'
        type: boolean
        required: false

jobs:
  binaries:
    name: Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe

    steps:
      - uses: actions/checkout@v3

      # Pick up a symbolic name for the build (e.g. "v1.0.1") and a guaranteed SHA or tag value.
      - name: Determine versions and names
        run: |
          BUILDNAME="cdc-sink-${{ matrix.os }}-${{ matrix.arch }}"
          OUTPUT="$BUILDNAME${{ matrix.ext }}"
          
          # Tag name or SHA
          VERSION=$(git describe --tags --always --dirty)
          
          # Print tag name, branch name, or just the SHA. 
          SYMBOLIC_NAME=$(
            git describe --tags --exact-match HEAD 2> /dev/null ||
            git symbolic-ref -q --short HEAD ||
            echo "$VERSION")
          
          DISTRO_PATHS=$(cat << EOF
          $OUTPUT
          README.md
          VERSION.txt
          licenses/*.txt
          EOF)
          
          echo "$VERSION" > VERSION.txt
          
          echo "BUILDNAME=$BUILDNAME" >> $GITHUB_ENV
          echo "DISTRO_NAME=$BUILDNAME-$SYMBOLIC_NAME" >> $GITHUB_ENV          
          echo "OUTPUT=$OUTPUT" >> $GITHUB_ENV
          echo "SYMBOLIC_NAME=$SYMBOLIC_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Special handling since this is a multiline string
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          echo "DISTRO_PATHS<<EOF" >> $GITHUB_ENV
          echo "$DISTRO_PATHS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Use separate build caches for each target platform.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ toJSON(matrix) }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      - name: Build
        run: >
          go
          build
          -v
          -ldflags="-s -w"
          -o $OUTPUT
          .
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - id: tarball
        name: Create distribution tarball
        run: |
          echo "${{ env.DISTRO_PATHS }}" |
          tr '\n' '\0' |
          xargs -0 -IQ find . -path ./Q | 
          xargs tar zcvf ${{ env.DISTRO_NAME }}.tgz --transform 's|^|${{ env.DISTRO_NAME }}/|'

      - id: local-upload
        name: Upload zip contents
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILDNAME }}
          path: ${{ env.DISTRO_PATHS }}
          if-no-files-found: error

      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.CDC_SINK_BINARIES_KEY }}

      - id: upload
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ env.DISTRO_NAME }}.tgz
          destination: ${{ vars.CDC_SINK_BUCKET }}/

      - id: link
        name: Summary link
        run: echo "[${{ env.BUILDNAME }}](https://storage.googleapis.com/${{ vars.CDC_SINK_BUCKET }}/${{ env.DISTRO_NAME }}.tgz)" >> $GITHUB_STEP_SUMMARY
