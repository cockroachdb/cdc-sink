name: Tests
permissions: read-all
on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
  workflow_dispatch: # Allow manual runs to kick off benchmarks
    inputs:
      run_bench:
        description: Run benchmarks
        required: false
        type: boolean

env:
  GO_VERSION: 1.17

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Determine paths to cache
        id: cache
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache.outputs.go-build }}
            ${{ steps.cache.outputs.go-mod }}
          key: ${{ runner.os }}-quality-${{ hashFiles('**/go.sum') }}

      # This action should, in general, be a no-op, given the cache above.
      - name: Download all deps
        run: go mod download

      - name: crlfmt returns no deltas
        if: ${{ always() }}
        run: |
          DELTA=$(go run github.com/cockroachdb/crlfmt -ignore _gen.go .)
          echo $DELTA
          test -z "$DELTA"

      - name: Lint
        if: ${{ always() }}
        run: go run golang.org/x/lint/golint -set_exit_status ./...

      - name: Static checks
        if: ${{ always() }}
        run: go run honnef.co/go/tools/cmd/staticcheck -checks all ./...

  integration:
    name: Integration Tests crdb-${{ matrix.cockroachdb }} ${{ matrix.integration }}
    strategy:
      fail-fast: false
      matrix:
        cockroachdb: [ v20.2, v21.1, v21.2, v22.1 ]
        # This matrix component should use the target names listed
        # in the docker-compose.yml file in the parent directory.
        integration:
          - "mysql-v8"
          - "mysql-mariadb-v10"
          - "postgresql-v11"
          - "postgresql-v12"
          - "postgresql-v13"
          - "postgresql-v14"
    runs-on: ubuntu-latest
    env:
      COVER_OUT: coverage.out
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Determine paths to cache
        id: cache
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache.outputs.go-build }}
            ${{ steps.cache.outputs.go-mod }}
          key: ${{ runner.os }}-integration-${{ hashFiles('**/go.sum') }}

      # This action should, in general, be a no-op, given the cache above.
      - name: Download all deps
        run: go mod download

      - name: Start CockroachDB
        working-directory: .github
        run: docker-compose up -d cockroachdb-${{ matrix.cockroachdb }}

      - name: Start ${{ matrix.integration }}
        if: ${{ matrix.integration }}
        working-directory: .github
        run: docker-compose up -d ${{ matrix.integration }}

      - name: Go Tests
        env:
          COCKROACH_DEV_LICENSE: ${{ secrets.COCKROACH_DEV_LICENSE }}
          CDC_INTEGRATION: ${{ matrix.integration }}
        run: go test -v -race -coverpkg=./internal/... -covermode=atomic -coverprofile=${{ env.COVER_OUT }} ./...

      - name: Manual Benchmarks
        if: ${{ github.event.inputs.run_bench }}
        env:
          COCKROACH_DEV_LICENSE: ${{ secrets.COCKROACH_DEV_LICENSE }}
          CDC_INTEGRATION: ${{ matrix.integration }}
        run: go test -v -benchtime 10s -bench . ./...

      - name: Stop databases
        if: ${{ always() }}
        working-directory: .github
        run: docker-compose down

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVER_OUT }}
