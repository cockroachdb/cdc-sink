# Copyright 2023 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Golang
permissions:
  contents: read
  packages: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  # Since we use the merge queue to push and there are no observable
  # side-effects of running a test-only workflow, we don't respond to
  # push events.
  merge_group: # Enable merge queue
  pull_request:
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
      - '.github/workflows/golang.yaml'

jobs:
  # Static code-quality checks.
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Just cache based on job and go.sum contents.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      - name: crlfmt returns no deltas
        if: ${{ always() }}
        run: |
          DELTA=$(go run github.com/cockroachdb/crlfmt -ignore _gen.go .)
          echo $DELTA
          test -z "$DELTA"

      - name: Copyright headers
        if: ${{ always () }}
        run: go run github.com/google/addlicense -c "The Cockroach Authors" -l apache -s -v  -check .

      - name: Lint
        if: ${{ always() }}
        run: go run golang.org/x/lint/golint -set_exit_status ./...

      - name: Static checks
        if: ${{ always() }}
        run: go run honnef.co/go/tools/cmd/staticcheck -checks all ./...

      - name: Go Vet
        if: ${{ always() }}
        run: go vet ./...

  # Integration matrix tests for all supported CRDB and source DBs.
  tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Pick a primary version to test all of the integration sources
        # against. The matrix component names should use the target
        # names listed in the docker-compose.yml file in the parent
        # directory.
        cockroachdb: [ v23.1 ]
        integration:
          - "firestore"
          - "mysql-v8"
          - "mysql-mariadb-v10"
          - "postgresql-v11"
          - "postgresql-v12"
          - "postgresql-v13"
          - "postgresql-v14"
          - "postgresql-v15"
        # The cockroachdb value in this include block will collide with
        # the value from the auto-expanded matrix. The net effect is
        # that we'll skip integration tests against older versions of
        # CRDB. These tests are kept around to ensure that the target
        # package doesn't use any SQL that couldn't be run on older CRDB
        # versions.
        #
        # Refer to the CRDB support policy when determining how many
        # older releases to support.
        # https://www.cockroachlabs.com/docs/releases/release-support-policy.html
        include:
          - cockroachdb: v21.1
          - cockroachdb: v21.2
          - cockroachdb: v22.1
          - cockroachdb: v22.2
          - cockroachdb: v23.1
    env:
      COVER_OUT: coverage-${{ matrix.cockroachdb }}-${{ matrix.integration }}.out
      FIRESTORE_EMULATOR_HOST: 127.0.0.1:8181
      JUNIT_OUT: junit-${{ matrix.cockroachdb }}-${{ matrix.integration }}.xml
      TEST_OUT: go-test-${{ matrix.cockroachdb }}-${{ matrix.integration }}.json
    steps:
      - uses: actions/checkout@v3

      # Just cache based on job and go.sum contents.
      - name: Write cache key
        run: echo '${{ github.job }} ${{ hashFiles('go.sum') }}' > CACHE_KEY

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: CACHE_KEY

      # Ensure we can grab any private images we need for testing.
      - name: Log in to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start CockroachDB
        working-directory: .github
        run: docker-compose up -d cockroachdb-${{ matrix.cockroachdb }}

      - name: Start ${{ matrix.integration }}
        if: ${{ matrix.integration }}
        working-directory: .github
        run: docker-compose up -d ${{ matrix.integration }}

      # The go test json output will be written into a pipeline to
      # create a JUnit.xml file. The test reports are aggregated later
      # on to produce a nicer summary of the test output in the GitHub
      # Actions UI.
      #
      # Inspired by
      # https://www.cloudwithchris.com/blog/githubactions-testsummary-go/
      - name: Go Tests
        env:
          COCKROACH_DEV_LICENSE: ${{ secrets.COCKROACH_DEV_LICENSE }}
          CDC_INTEGRATION: ${{ matrix.integration }}
        run: >
          set -o pipefail;
          go test
          -count 1
          -coverpkg=./internal/...
          -covermode=atomic
          -coverprofile=${{ env.COVER_OUT }}
          -race
          -v
          ./... 2>&1 |
          go run github.com/jstemmer/go-junit-report/v2
          -iocopy
          -out ${{ env.JUNIT_OUT }}
          -p cockroachdb=${{ matrix.cockroachdb }}
          -p integration=${{ matrix.integration }}
          -package-name ${{ matrix.cockroachdb }}-${{ matrix.integration }} |
          tee ${{ env.TEST_OUT }}

      - name: Stop databases
        if: ${{ always() }}
        working-directory: .github
        run: docker-compose down

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVER_OUT }}

      # Upload all test reports to a common artifact name, to make them
      # available to the summarization step. The go test json is
      # uploaded as a developer convenience.
      - name: Stash test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-reports
          path: |
            ${{ env.COVER_OUT }}
            ${{ env.JUNIT_OUT }}
            ${{ env.TEST_OUT }}
          retention-days: 7

  # Aggregate the results of multiple jobs within this workflow into a
  # single status object that we can use for branch protection.
  #
  # https://docs.github.com/en/rest/commits/statuses
  status:
    name: Create status objects
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    needs: # Update failure case below
      - code-quality
      - tests
    if: ${{ always() }}
    env:
      CONTEXT: Workflow Golang
      GH_TOKEN: ${{ github.token }}
      MERGE_SHA: ${{ github.event.merge_group.head_sha }}
      PR_SHA: ${{ github.event.pull_request.head.sha }}
      STATE: success
    steps:
      - name: Failure
        if: ${{ needs.code-quality.result != 'success' ||  needs.tests.result != 'success' }}
        run: echo "STATE=failure" >> $GITHUB_ENV
      - name: Report
        run: |
          set -eo pipefail

          if [ ! -z "$PR_SHA" ]; then
            gh api \
               repos/${{ github.repository }}/statuses/$PR_SHA \
               -f "state=$STATE" \
               -f "context=$CONTEXT"
          fi

          if [ ! -z "$MERGE_SHA" ]; then
            gh api \
              repos/${{ github.repository }}/statuses/$MERGE_SHA \
              -f "state=$STATE" \
              -f "context=$CONTEXT"
          fi

  # This job downloads the test log files generated in the integration
  # job and summarizes them into the GitHub Actions UI.
  summarize-tests:
    name: Test summaries
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          name: integration-reports
      - name: Summarize
        uses: test-summary/action@v2
        with:
          paths: junit-*.xml
